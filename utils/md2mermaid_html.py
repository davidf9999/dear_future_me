#!/usr/bin/env python3
import asyncio
import re
import sys
from pathlib import Path

from pyppeteer import launch

# HTML template embedding Mermaid.js
HTML_TEMPLATE = """<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8"/>
  <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
  <style> body {{ margin: 0; }} </style>
</head>
<body>
<div class="mermaid">
{diagram}
</div>
<script>
  mermaid.initialize({{ startOnLoad: true }});
</script>
</body>
</html>
"""


async def render_to_png(html_path: str, output_png: str) -> None:
    """
    Launch a headless browser, open the HTML file at html_path,
    wait for Mermaid to render the diagram, then screenshot the <svg>.
    """
    browser = await launch({"args": ["--no-sandbox"]})
    page = await browser.newPage()

    # Resolve to an absolute file:// URI
    html_file = Path(html_path).resolve()
    html_uri = html_file.as_uri()  # e.g. "file:///home/.../diagram.html"
    await page.goto(html_uri)

    # Wait for the <svg> generated by Mermaid
    await page.waitForSelector("svg")

    # Screenshot that <svg> element to PNG
    svg_elem = await page.querySelector("svg")
    await svg_elem.screenshot({"path": output_png})

    await browser.close()


def main() -> None:
    if len(sys.argv) < 2:
        print("Usage: md2mermaid_png.py <input.md> [output.png]")
        sys.exit(1)

    md_path = Path(sys.argv[1])
    if not md_path.exists():
        print(f"Error: {md_path} does not exist.")
        sys.exit(1)

    # Determine output HTML and PNG paths (absolute)
    html_abs = md_path.with_suffix(".html").resolve()
    png_abs = Path(sys.argv[2]).resolve() if len(sys.argv) > 2 else md_path.with_suffix(".png").resolve()

    # Extract the first mermaid code block
    text = md_path.read_text(encoding="utf-8")
    match = re.search(r"```mermaid\s+([\s\S]+?)```", text)
    if not match:
        print("Error: No mermaid code block found in the markdown.")
        sys.exit(1)
    diagram = match.group(1).strip()

    # Write out the HTML file
    html_content = HTML_TEMPLATE.format(diagram=diagram)
    html_abs.write_text(html_content, encoding="utf-8")
    print(f"✅   Wrote HTML preview to {html_abs.name}")

    # Render to PNG
    asyncio.get_event_loop().run_until_complete(render_to_png(str(html_abs), str(png_abs)))
    print(f"✅   Wrote PNG output to    {png_abs.name}")


if __name__ == "__main__":
    main()
