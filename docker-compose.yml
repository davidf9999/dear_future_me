version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    # image: yourusername/fastapi-backend # Optionally, you can tag and push images
    ports:
      - "8000:80" # Host:Container
    volumes:
      - ./backend/app:/code/app # For development, mounts local code
    environment:
      - PYTHONUNBUFFERED=1 # Ensures print statements and logs appear without delay
    # restart: unless-stopped # Optional: for production-like behavior

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile # We created frontend/Dockerfile
    # image: yourusername/streamlit-frontend # Optionally, you can tag and push images
    ports:
      - "8501:8501"
    volumes:
      - ./frontend:/app # Mounts local frontend code for development
                        # Ensure WORKDIR in frontend/Dockerfile is /app
    depends_on:
      - backend     # Ensures backend starts before frontend
    environment:
      - PYTHONUNBUFFERED=1
      - STREAMLIT_SERVER_PORT=8501
      # The Streamlit app can use this URL to communicate with the FastAPI backend.
      # 'backend' is the service name defined above and is resolvable within Docker's network.
      - BACKEND_URL=http://backend:80
    # This command overrides the CMD in frontend/Dockerfile.
    # --server.address=0.0.0.0 is crucial for Docker.
    # --server.enableCORS=false and --server.enableXsrfProtection=false can be helpful
    # in containerized setups, especially if you embed Streamlit or access it across different origins.
    # Adjust or remove these flags based on your specific needs.
    command: streamlit run main.py --server.port=8501 --server.address=0.0.0.0 --server.enableCORS=false --server.enableXsrfProtection=false
    # restart: unless-stopped # Optional: for production-like behavior

# Optional: Define a default network if needed, though Docker Compose creates one by default.
# networks:
#   app-network:
#     driver: bridge
