name: CI Pipeline

on:
  push:
    branches: [main, dev] # Or your specific branches
  pull_request:
    branches: [main]

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"] # Or your target Python versions

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run Ruff Linter
      run: ruff check .

    - name: Run Ruff Formatter Check
      run: ruff format --check .

    # If you still use Black separately, ensure version consistency
    # - name: Run Black Check
    #   run: black --check .

    # - name: Run Mypy
    #   run: mypy app tests # Or your specific paths

    - name: Run database migrations (if applicable)
      # This step needs environment variables for Settings instantiation
      run: alembic upgrade head
      env:
        DATABASE_URL: sqlite+aiosqlite:///./test_ci.db # Use a CI-specific DB
        SECRET_KEY: ci_secret_key_for_alembic_test
        OPENAI_API_KEY: ci_openai_key_for_alembic_test # Required by Settings
        CHROMA_DB_PATH: ./data/ci_test/chroma_db     # Required by Settings
        DEMO_USER_EMAIL: ci_demo@example.com         # Required by Settings
        DEMO_USER_PASSWORD: ci_demopassword        # Required by Settings
        APP_DEFAULT_LANGUAGE: en                     # Required by Settings

    - name: Run Pytest
      run: pytest
      env:
        # Pytest conftest.py should set most test-specific env vars
        # But if any are absolutely needed here and not set by conftest for some reason:
        # OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_FOR_TESTS }} # Example if tests hit live API
        PYTHONPATH: .
